name: build-all

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/**'
    tags:
      - "v*.*.*"
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '.github/**'

env:
  bl_mcu_sdk_version: 356f258e83cf9f39598c593710dd95e31c0627e7
  oblfr_version: v0.0.2

    
jobs:
  buildroot:
    strategy:
      fail-fast: true
      matrix:
        target: [ pine64_ox64_defconfig, pine64_ox64_full_defconfig ]
    runs-on: ubuntu-22.04
    steps:
    - name: install dependencies
      run: |
        sudo apt-get install -y make gcc g++ unzip git bc python3 device-tree-compiler mtd-utils xz-utils
    - name: Checkout Buildroot sources
      uses: actions/checkout@v3
      with:
        repository: buildroot/buildroot
        ref: 2022.08.3
        path: buildroot
    - name: Checkout OpenBouffalo Buildroot
      uses: actions/checkout@v3
      with:
        path: buildroot_bouffalo
    - name: buildroot target cache
      id: br-output-cache
      uses: actions/cache@v3
      env:
        cache-name: br-output-cache
      with:
        path: ${{ github.workspace }}/buildroot/output/images/
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.target }}-${{ hashFiles(format('buildroot_bouffalo/configs/{0}', matrix.target), 'buildroot_bouffalo/board/pine64/ox64/**', 'buildroot_bouffalo/packages/**') }}
    - name: buildroot download cache
      if: steps.br-output-cache.outputs.cache-hit != 'true'
      uses: actions/cache@v3
      env:
        cache-name: cache-download-files
      with:
        path: ${{ github.workspace }}/buildroot/dl/
        key: ${{ runner.os }}-build-${{ env.cache-name }}-downloads
    - name: Bulid
      if: steps.br-output-cache.outputs.cache-hit != 'true'
      run: |
        export BR_BOUFFALO_OVERLAY_PATH=$(pwd)/buildroot_bouffalo
        cd buildroot
        make BR2_EXTERNAL=$BR_BOUFFALO_OVERLAY_PATH ${{ matrix.target }}
        make
    - name: Pack
      run: |
        cd ${{ github.workspace }}/buildroot/output/images/
        ls -lah
        if [ -f sdcard.img ]; then
            xz -z sdcard.img
            mv sdcard.img.xz sdcard-${{ matrix.target }}.img.xz
        fi
        if [ -f Image ]; then
            lz4 -9 -f Image Image-${{ matrix.target }}.lz4
        fi
        echo "PACKAGE=${{ github.workspace }}/buildroot/output/images/sdcard-${{ matrix.target }}.img.xz" >> $GITHUB_ENV
        echo "KERNEL=${{ github.workspace }}/buildroot/output/images/Image-${{ matrix.target }}.lz4" >> $GITHUB_ENV
        echo "DTB=${{ github.workspace }}/buildroot/output/images/bl808-*.dtb" >> $GITHUB_ENV
        echo "OPENSBI=${{ github.workspace }}/buildroot/output/images/fw_jump.bin" >> $GITHUB_ENV
    - name: Upload package
      uses: actions/upload-artifact@master
      with:
        name: build artifacts
        path: |
          ${{env.PACKAGE}}
          ${{env.KERNEL}}
          ${{env.DTB}}
          ${{env.OPENSBI}}
  lowload:
    runs-on: ubuntu-22.04
    if: github.event_name != 'pull_request'
    steps:
    - name: install dependencies
      run: |
        sudo apt-get install -y make gcc g++ cmake
    - name: Checkout bl_mcu_sdk
      uses: actions/checkout@v3
      with:
        repository: bouffalolab/bl_mcu_sdk
        path: bl_mcu_sdk
        ref: ${{ env.bl_mcu_sdk_version }}
    - name: Checkout OpenBouffalo Firmware Repository
      uses: actions/checkout@v3
      with:
        repository: openbouffalo/OBLFR
        path: oblfr
        ref: ${{ env.oblfr_version }}
    - name: toolchain download cache
      id: toolchain-cache
      uses: actions/cache@v3
      env:
        cache-name: cache-toolchain-files
      with:
        path: ${{ github.workspace }}/toolchain_gcc_t-head_linux/
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Download Toolchain
      if: steps.toolchain-cache.outputs.cache-hit != 'true'
      run: |
        git clone https://gitee.com/bouffalolab/toolchain_gcc_t-head_linux.git
    - name: Compile Firmware
      run: | 
        PATH=$PATH:${{ github.workspace }}/toolchain_gcc_t-head_linux/bin/
        cd ${{ github.workspace }}/oblfr/apps/d0_lowload
        make
        echo "D0LOWLOAD=${{ github.workspace }}/oblfr/apps/d0_lowload/build/build_out/d0_lowload_bl808_d0.bin" >> $GITHUB_ENV
        cd ${{ github.workspace }}/oblfr/apps/m0_lowload
        make
        echo "M0LOWLOAD=${{ github.workspace }}/oblfr/apps/m0_lowload/build/build_out/m0_lowload_bl808_m0.bin" >> $GITHUB_ENV
    - name: Upload Firmware
      uses: actions/upload-artifact@master
      with:
        name: build artifacts
        path: |
          ${{env.D0LOWLOAD}}
          ${{env.M0LOWLOAD}}
  createimages:
    if: github.event_name != 'pull_request'
    strategy:
      fail-fast: true
      matrix:
        target: [ pine64_ox64_defconfig, pine64_ox64_full_defconfig ]
    runs-on: ubuntu-22.04
    needs: [buildroot, lowload]
    steps:
    - name: install dependencies
      run: |
        sudo apt-get install -y python3
    - name: Checkout OpenBouffalo Buildroot
      uses: actions/checkout@v3
      with:
        path: buildroot_bouffalo
    - name: Download build files
      uses: actions/download-artifact@v3
      with:
        name: build artifacts
        path: ${{ github.workspace }}/build
    - name: Create images
      run: |
        cd ${{ github.workspace }}/build
        ls -lah 
        mv Image-${{ matrix.target }}.lz4 Image.lz4
        ${{ github.workspace }}/buildroot_bouffalo/package/mergebin/mergebin.py
        mkdir firmware
        cp d0_lowload/build/build_out/*.bin firmware/
        cp m0_lowload/build/build_out/*.bin firmware/
        cp whole_img_linux.bin firmware/
        cp sdcard-${{ matrix.target }}.img.xz firmware/
        tar -czvf bl808-linux-${{ matrix.target }}.tar.gz firmware
        echo "FIRMWARE=${{ github.workspace }}/build/bl808-linux-${{ matrix.target }}.tar.gz" >> $GITHUB_ENV
    - name: Upload Firmware
      uses: actions/upload-artifact@master
      with:
        name: linux-buildroot-${{ matrix.target }}
        path: |
          ${{env.FIRMWARE}}        

  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-22.04
    needs: [createimages]
    permissions: write-all
    steps:
      - name: download firmware
        uses: actions/download-artifact@v3
      - name: Create images
        run: |
          ls -lah
          ls -lah linux-buildroot-*/*.tar.gz
      - name: publish artifacts
        uses: softprops/action-gh-release@v1
        with:
          append_body: true
          files: |
            linux-buildroot-*/*.tar.gz
